---
- name: Optimize CTFd OpenShift Deployments (Scale Down/Up Strategy)
  hosts: localhost
  connection: local

  # Variables for your OpenShift project and deployment names
  vars:
    namespace: ctfd # Keep namespace as is, the warning is minor.
    app_deployment_name: ctfd
    db_deployment_name: ctfd-mysql-db
    app_container_name: ctfd
    db_container_name: ctfd-mysql-db
    # Define desired replica count (currently 1 for both)
    desired_replica_count: 1

  pre_tasks: # <<< THIS LINE MUST START AT COLUMN 1 - NO LEADING SPACES OR TABS <<<
    - name: --- PRE-TASKS SCALE DOWN DEPLOYMENTS FOR PATCHING ---
      ansible.builtin.debug:
        msg: "Scaling down deployments to 0 replicas. Application will experience downtime."

    - name: "Scale down to 0 replicas"
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge # Or 'strategic' if your oc client requires it
        definition:
          spec:
            replicas: 0 # Directly set replicas to 0
      register: app_scale_down_patch_result
      until: app_scale_down_patch_result is succeeded
      retries: 5
      delay: 5
      
    - name: Wait for {{ app_deployment_name }} pods to terminate after scale down (using k8s_info)
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        field_selectors:
          - status.phase!=Succeeded
          - status.phase!=Failed
        label_selectors:
          - app={{ app_deployment_name }}
      register: app_remaining_pods_check
      until: app_remaining_pods_check.resources | length == 0
      retries: 10
      delay: 10

    - name: Scale down {{ db_deployment_name }} to 0 replicas (using k8s_patch)
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment # << CHANGE TO 'StatefulSet' IF YOUR DB IS A STATEFULSET >>
        name: "{{ db_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            replicas: 0 # Directly set replicas to 0
      register: db_scale_down_patch_result
      until: db_scale_down_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Verify all {{ db_deployment_name }} pods are truly terminated after scale down (using k8s_info)
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        field_selectors:
          - status.phase!=Succeeded
          - status.phase!=Failed
        label_selectors:
          - app={{ db_deployment_name }}
      register: db_remaining_pods_check
      until: db_remaining_pods_check.resources | length == 0
      retries: 10
      delay: 10

  tasks: # This keyword MUST start at column 1. NO LEADING SPACES OR TABS.
    - name: --- PATCHING DEPLOYMENTS (WHILE SCALED DOWN) ---
      ansible.builtin.debug:
        msg: "Applying patches to deployments. No new pods will start until scale up."

    - name: Generate SECRET_KEY
      ansible.builtin.command: openssl rand -hex 32
      register: secret_key_result
      changed_when: false

    - name: Set SECRET_KEY fact for use in subsequent patches
      ansible.builtin.set_fact:
        generated_secret_key: "{{ secret_key_result.stdout }}"

    - name: Display generated SECRET_KEY (for debugging, remove in production)
      ansible.builtin.debug:
        msg: "Generated SECRET_KEY: {{ generated_secret_key }}"

    - name: Apply Deployment Strategy for {{ app_deployment_name }} (maxSurge 0, maxUnavailable 1)
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge # Or 'strategic' if your oc client requires it
        definition:
          spec:
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 0
                maxUnavailable: 1
      register: app_strategy_patch_result
      until: app_strategy_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Apply Resource Limits and Requests for {{ app_deployment_name }}
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: "{{ app_container_name }}"
                    resources:
                      limits:
                        cpu: 4000m
                        memory: 1Gi
                      requests:
                        cpu: 2000m
                        memory: 512Mi
      register: app_resources_patch_result
      until: app_resources_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Update WORKERS Environment Variable for {{ app_deployment_name }} to 5
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: "{{ app_container_name }}"
                    env:
                      - name: WORKERS
                        value: "5"
      register: app_workers_patch_result
      until: app_workers_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Set SECRET_KEY Environment Variable for {{ app_deployment_name }}
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: "{{ app_container_name }}"
                    env:
                      - name: SECRET_KEY
                        value: "{{ generated_secret_key }}"
      register: app_secret_key_patch_result
      until: app_secret_key_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Set RATELIMIT_DEFAULT Environment Variable for {{ app_deployment_name }}
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: "{{ app_container_name }}"
                    env:
                      - name: RATELIMIT_DEFAULT
                        value: "1000 per 5 seconds"
      register: app_ratelimit_patch_result
      until: app_ratelimit_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Apply Deployment Strategy for {{ db_deployment_name }} (maxSurge 0, maxUnavailable 1)
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment # << CHANGE TO 'StatefulSet' IF YOUR DB IS A STATEFULSET >>
        name: "{{ db_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 0
                maxUnavailable: 1
      register: db_strategy_patch_result
      until: db_strategy_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Apply Resource Limits and Requests for {{ db_deployment_name }}
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment # << CHANGE TO 'StatefulSet' IF YOUR DB IS A STATEFULSET >>
        name: "{{ db_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: "{{ db_container_name }}"
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 2Gi
                      requests:
                        cpu: 500m
                        memory: 1Gi
      register: db_resources_patch_result
      until: db_resources_patch_result is succeeded
      retries: 5
      delay: 5

  post_tasks: # This keyword MUST start at column 1. NO LEADING SPACES OR TABS.
    - name: --- POST-TASKS SCALE UP DEPLOYMENTS ---
      ansible.builtin.debug:
        msg: "Scaling up deployments. Application will become available."

    - name: Scale up {{ db_deployment_name }} to {{ desired_replica_count }} replicas (using k8s_patch)
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment # << CHANGE TO 'StatefulSet' IF YOUR DB IS A STATEFULSET >>
        name: "{{ db_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            replicas: "{{ desired_replica_count }}"
      register: db_scale_up_patch_result
      until: db_scale_up_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Wait for {{ db_deployment_name }} to be ready after scaling up
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ db_deployment_name }}"
        namespace: "{{ namespace }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
      register: db_deployment_status

    - name: Scale up {{ app_deployment_name }} to {{ desired_replica_count }} replicas (using k8s_patch)
      kubernetes.core.k8s_patch:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        type: strategic-merge
        definition:
          spec:
            replicas: "{{ desired_replica_count }}"
      register: app_scale_up_patch_result
      until: app_scale_up_patch_result is succeeded
      retries: 5
      delay: 5

    - name: Wait for {{ app_deployment_name }} to be ready after scaling up
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_deployment_name }}"
        namespace: "{{ namespace }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
      register: app_deployment_status

    - name: Playbook execution complete
      ansible.builtin.debug:
        msg: |
          All CTFd deployment optimizations submitted.
          Your CTFd application and database deployments are now configured.
          Please wait for all rollouts to complete and then rerun your Playwright load test.
          Remember to monitor both CTFd app and DB pod metrics during the next test run.